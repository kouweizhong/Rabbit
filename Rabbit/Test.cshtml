@* Generator: WebPage *@
@using System.Dynamic
@using Rabbit 
@{  

    ((IList<Tuple<string, string>>)PageData["BreadCrumbs"]).Add(Tuple.Create<string, string>("Rabbit Admin", "/_Admin/Rabbit"));
    ((IList<Tuple<string, string>>)PageData["BreadCrumbs"]).Add(Tuple.Create<string, string>("Unit Testing", "/_Admin/Rabbit/Test"));
    
    dynamic tests = Testing.Get_Tests(null) as dynamic; //SiteEngine.RunHook("get_tests");
    var testc = UrlData[0];
    if (testc.IsEmpty()) {testc = "";}
    var testn = UrlData[1];    
}
@section Head {
    <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.4.4.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="http://code.jquery.com/qunit/git/qunit.css" type="text/css" media="screen">  
    <script type="text/javascript" src="http://code.jquery.com/qunit/git/qunit.js"></script>  
    <style type="text/css">
        ul.tests, ul.tests ul, ul.tests ul li{margin-left:10px;}
        ul.tests ul li:before {content: "» ";}
    </style>
}

<div style="float:right;width:30%;padding-left:10px;">
    <h2>Tests Found</h2>
    <p>Select test to run</p>
    <ul class="tests">
    @foreach (var testclass in tests)
    { 
        <li><a href="/_Admin/Rabbit/Test/@testclass.Key">@testclass.Key</a></li>
        <ul>
        @foreach (var test in testclass.Value)
        {
            <li><a href="/_Admin/Rabbit/Test/@testclass.Key/@test">@test</a></li>
        }   
        </ul>   
    }
    </ul>
    <a href="/_Admin/Rabbit/Test/All">Run all tests</a>
</div>

<div style="float:left;width:68%">   
    <h2>Test Results</h2><br/>
    <div id="qunit-testrunner-toolbar"></div>
    <ol id="qunit-tests"></ol>
    <div id="qunit-fixture"></div>
</div>

<script type="text/javascript">
    $(function () {
        @foreach (dynamic testclass in tests)
        {
            if (testc.ToLower() == "all" || testclass.Key == testc)
            {
                <text>module("@testclass.Key");</text> 
                foreach (dynamic test in testclass.Value)
                {
                    if (testn.IsEmpty() || test == testn)
                    {
                        dynamic testrun = new ExpandoObject();
                        testrun.ClassName = testclass.Key;
                        testrun.MethodName = test;
                        testrun.HasPassed = "false";
                        testrun.Message = "";
                        testrun = Testing.Run_Test(testrun) as dynamic; //SiteEngine.RunHook("run_test", testrun);

                        <text>test("@testrun.MethodName", function () { 
                            ok(@testrun.HasPassed, "@testrun.Message"); 
                        });
                        </text>        
                     }
                }
            }
        }
    });
</script>
