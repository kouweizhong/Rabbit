#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.431
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rabbit
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.WebPages.Html;
    using System.Dynamic;
    using Rabbit;
    using WebMatrix.Data;
    using WebMatrix.WebData;
    
    [System.Web.WebPages.PageVirtualPathAttribute("~/Test.cshtml")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorSingleFileGenerator", "1.0.0.0")]
    public class Test_cshtml : System.Web.WebPages.WebPage
    {
#line hidden

                    // Resolve package relative syntax
                    // Also, if it comes from a static embedded resource, change the path accordingly
                    public override string Href(string virtualPath, params object[] pathParts) {
                        virtualPath = ApplicationPart.ProcessVirtualPath(GetType().Assembly, VirtualPath, virtualPath);
                        return base.Href(virtualPath, pathParts);
                    }
        public Test_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {


WriteLiteral("\r\n");




    

    ((IList<Tuple<string, string>>)PageData["BreadCrumbs"]).Add(Tuple.Create<string, string>("Rabbit Admin", "/_Admin/Rabbit"));
    ((IList<Tuple<string, string>>)PageData["BreadCrumbs"]).Add(Tuple.Create<string, string>("Unit Testing", "/_Admin/Rabbit/Test"));
    
    dynamic tests = Testing.Get_Tests(null) as dynamic; //SiteEngine.RunHook("get_tests");
    var testc = UrlData[0];
    if (testc.IsEmpty()) {testc = "";}
    var testn = UrlData[1];    



DefineSection("Head", () => {

WriteLiteral(@"
    <script src=""http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.4.4.min.js"" type=""text/javascript""></script>
    <link rel=""stylesheet"" href=""http://code.jquery.com/qunit/git/qunit.css"" type=""text/css"" media=""screen"">  
    <script type=""text/javascript"" src=""http://code.jquery.com/qunit/git/qunit.js""></script>  
    <style type=""text/css"">
        ul.tests, ul.tests ul, ul.tests ul li{margin-left:10px;}
        ul.tests ul li:before {content: ""» "";}
    </style>
");


});

WriteLiteral("\r\n\r\n<div style=\"float:right;width:30%;padding-left:10px;\">\r\n    <h2>Tests Found</" +
"h2>\r\n    <p>Select test to run</p>\r\n    <ul class=\"tests\">\r\n");


     foreach (var testclass in tests)
    { 

WriteLiteral("        <li><a href=\"/_Admin/Rabbit/Test/");


                                    Write(testclass.Key);

WriteLiteral("\">");


                                                    Write(testclass.Key);

WriteLiteral("</a></li>\r\n");



WriteLiteral("        <ul>\r\n");


         foreach (var test in testclass.Value)
        {

WriteLiteral("            <li><a href=\"/_Admin/Rabbit/Test/");


                                        Write(testclass.Key);

WriteLiteral("/");


                                                       Write(test);

WriteLiteral("\">");


                                                              Write(test);

WriteLiteral("</a></li>\r\n");


        }   

WriteLiteral("        </ul>   \r\n");


    }

WriteLiteral(@"    </ul>
    <a href=""/_Admin/Rabbit/Test/All"">Run all tests</a>
</div>

<div style=""float:left;width:68%"">   
    <h2>Test Results</h2><br/>
    <div id=""qunit-testrunner-toolbar""></div>
    <ol id=""qunit-tests""></ol>
    <div id=""qunit-fixture""></div>
</div>

<script type=""text/javascript"">
    $(function () {
");


         foreach (dynamic testclass in tests)
        {
            if (testc.ToLower() == "all" || testclass.Key == testc)
            {

WriteLiteral("                ");

WriteLiteral("module(\"");


                         Write(testclass.Key);

WriteLiteral("\");");

WriteLiteral(" \r\n");


                foreach (dynamic test in testclass.Value)
                {
                    if (testn.IsEmpty() || test == testn)
                    {
                        dynamic testrun = new ExpandoObject();
                        testrun.ClassName = testclass.Key;
                        testrun.MethodName = test;
                        testrun.HasPassed = "false";
                        testrun.Message = "";
                        testrun = Testing.Run_Test(testrun) as dynamic; //SiteEngine.RunHook("run_test", testrun);


WriteLiteral("                        ");

WriteLiteral("test(\"");


                               Write(testrun.MethodName);

WriteLiteral("\", function () { \r\n                            ok(");


                          Write(testrun.HasPassed);

WriteLiteral(", \"");


                                               Write(testrun.Message);

WriteLiteral("\"); \r\n                        });\r\n                        ");

WriteLiteral("        \r\n");


                     }
                }
            }
        }

WriteLiteral("    });\r\n</script>\r\n");


        }
    }
}
#pragma warning restore 1591
